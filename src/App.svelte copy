<!-- 
••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
    Component Logic (JavaScript)
ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº
 -->
<script>
    import Item from "./Item.svelte";
    import {beforeUpdate, onMount} from "svelte";

    let itemList;// will hold a Promise to return array of products imported from Google Sheet API
    beforeUpdate(async () => {// Svelte lifecycle event that runs before mounting component
        itemList = convertToJSONObject(await getSheetData());
        console.log("TCL: itemList", itemList);
    }); 

    const convertToJSONObject = data => {
        let [headings, ...list] = JSON.parse(data);
        const convertedList = list.map(item => {
            const newObj = {};
            headings.forEach((heading, i) => {
                newObj[heading] = item[i];
            });
            return newObj
        })
        console.log("TCL: convertedList", convertedList)
        return convertedList;
    }

    const getSheetData = async () => {// returns a Promise
        const sheetData = await fetch("/api");
        return await sheetData.json();
    }

</script>

<!-- 
••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
    Styles (CSS)
ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº
 -->
<style>
    /*∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞*/
    /* Some useful global styles (you may want to keep or add to) */
    /*∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞*/
	:global(body) { /* syntax to apply global styles in Svelte */
		box-sizing: border-box;
		scroll-behavior: smooth;
        outline: none;
        padding: 0;
		margin: 0;
		text-rendering: optimizeLegibility;
        width: 100%;
        height: 100%;
    }
    :global(*, *:before, *:after) {
		box-sizing: inherit;
        margin: 0;
        padding: 0;
	}
	:global(a) {
		text-decoration: none;
		color: inherit;
    }
    .main-container {
        position: absolute;
        justify-items: center;
    }
</style>


<!-- 
••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
    Component Markup (HTML template)
ºººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº
 -->
<div class="main-container">
    {#await itemList}
        {:then itemList}
        
            {#each itemList as item (item.id)}
            {console.log("*",itemList)}
                <Item key={item.id} item={{...item}}/>
            {/each}
        {:catch error}
            <p style="color: red">{error.message}</p>
    {/await}

</div><!--.main-grid-->
